"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const os_1 = require("os");
const path_1 = require("path");
class Tags {
    constructor() {
        this.inProgress = false;
        this.disposables = new atom_1.CompositeDisposable();
        this.tags = new Map();
        this.paths = atom.project.getPaths();
        this.filesChanged = (evts) => {
            for (const evt of evts) {
                if (!evt.path.endsWith('.hs') && !evt.path.endsWith('.lhs'))
                    continue;
                switch (evt.action) {
                    case 'created':
                        this.update(evt.path);
                        break;
                    case 'modified':
                        this.update(evt.path);
                        break;
                    case 'deleted':
                        this.tags.delete(evt.path);
                        break;
                    case 'renamed':
                        this.tags.delete(evt.oldPath);
                        this.update(evt.path);
                        break;
                }
            }
        };
        this.pathsChanged = (paths) => {
            const removedPaths = this.paths.filter(p => !paths.includes(p));
            const addedPaths = paths.filter(p => !this.paths.includes(p));
            console.error('pathsChanged', removedPaths, addedPaths);
            if (removedPaths.length > 0) {
                Array.from(this.tags.keys()).filter(f => removedPaths.some(p => f.startsWith(p + path_1.sep))).forEach(k => this.tags.delete(k));
            }
            for (const path of addedPaths) {
                this.update(path);
            }
            this.paths = paths;
        };
        this.disposables.add(atom.project.onDidChangeFiles(this.filesChanged));
        this.disposables.add(atom.project.onDidChangePaths(this.pathsChanged));
        for (const path of this.paths) {
            this.update(path);
        }
    }
    destroy() {
        this.disposables.dispose();
        this.tags.clear();
    }
    update(path) {
        this.inProgress = true;
        let fn = false;
        let curfile = new Map();
        let cmd = atom.config.get('ide-haskell-hasktags.hasktagsPath');
        if (!cmd)
            return;
        let BP;
        if (cmd === 'hasktags.js') {
            cmd = require.resolve('@atom-haskell/hasktags-js');
            BP = atom_1.BufferedNodeProcess;
        }
        else {
            BP = atom_1.BufferedProcess;
        }
        const hasktagsArgs = ['-eRo-'];
        if (atom.config.get('ide-haskell-hasktags.ignoreCloseImplementation')) {
            hasktagsArgs.push('--ignore-close-implementation');
        }
        hasktagsArgs.push(path);
        new BP({
            command: cmd,
            args: hasktagsArgs,
            stdout: (data) => {
                const lines = data.split(os_1.EOL);
                for (const line of lines.slice(0, -1)) {
                    switch (true) {
                        case line === '\x0c':
                            fn = true;
                            break;
                        case fn:
                            fn = false;
                            const res = /^(.*),\d+$/.exec(line);
                            if (res === null)
                                continue;
                            const [, src] = res;
                            curfile = new Map();
                            this.tags.set(src, curfile);
                            break;
                        default:
                            const rxr = /^(.*)\x7f(.*)\x01(\d+),(\d+)$/.exec(line);
                            if (rxr === null)
                                continue;
                            const [, context, tagName, lineNo] = rxr;
                            let obj = curfile.get(tagName);
                            if (obj === undefined) {
                                obj = [];
                                curfile.set(tagName, obj);
                            }
                            obj.push({ context, line: parseInt(lineNo, 10) });
                    }
                }
            },
            exit: () => { this.inProgress = false; },
        });
    }
    listTags(uri) {
        const res = [];
        if (!uri) {
            this.tags.forEach((tagMap, uri) => tagMap.forEach((lines, tag) => lines.forEach(({ context, line }) => res.push({ tag, uri, context, line }))));
        }
        else {
            const tagMap = this.tags.get(uri);
            if (tagMap !== undefined) {
                tagMap.forEach((lines, tag) => lines.forEach(({ context, line }) => res.push({ tag, uri, context, line })));
            }
        }
        return res;
    }
    findTag(tag) {
        const res = [];
        this.tags.forEach((tagMap, uri) => {
            const lines = tagMap.get(tag);
            if (lines === undefined)
                return;
            lines.forEach(({ context, line }) => {
                res.push({ tag, uri, context, line });
            });
        });
        return res;
    }
}
exports.Tags = Tags;
//# sourceMappingURL=data:application/json;base64,