"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const tags_1 = require("./tags");
const tags_list_view_1 = require("./tags-list-view");
var config_1 = require("./config");
exports.config = config_1.config;
let stack;
let disposables;
let active = false;
async function showList(editor, tags) {
    const tag = await tags_list_view_1.selectListView(tags, exports.tagsInstance.inProgress);
    if (tag !== undefined)
        open(editor, tag);
}
function open(editor, tag) {
    const edp = editor.getPath();
    if (edp) {
        stack.push({
            uri: edp,
            line: editor.getLastCursor().getBufferRow(),
            column: editor.getLastCursor().getBufferColumn(),
        });
    }
    void atom.workspace.open(tag.uri, {
        initialLine: tag.line,
        searchAllPanes: true,
    });
}
function activate() {
    active = true;
    stack = [];
    exports.tagsInstance = new tags_1.Tags();
    disposables = new atom_1.CompositeDisposable();
    disposables.add(atom.commands.add('atom-workspace', {
        'ide-haskell-hasktags:show-tags': () => {
            if (!active)
                return;
            const ed = atom.workspace.getActiveTextEditor();
            if (ed)
                void showList(ed, exports.tagsInstance.listTags());
        },
        'ide-haskell-hasktags:go-back': () => {
            const prevpos = stack.pop();
            if (prevpos) {
                void atom.workspace.open(prevpos.uri, {
                    initialLine: prevpos.line,
                    initialColumn: prevpos.column,
                    searchAllPanes: true,
                });
            }
        },
    }));
    disposables.add(atom.commands.add('atom-text-editor', {
        'ide-haskell-hasktags:show-file-tags': ({ currentTarget }) => {
            if (!active)
                return;
            const editor = currentTarget.getModel();
            const path = editor.getPath();
            if (!path)
                return;
            void showList(editor, exports.tagsInstance.listTags(path));
        },
    }));
    disposables.add(atom.contextMenu.add({
        'atom-text-editor[data-grammar~="haskell"]': [{
                label: 'Show File Tags',
                command: 'ide-haskell-hasktags:show-file-tags',
            }],
    }));
    disposables.add(atom.menu.add([{
            label: 'Haskell IDE',
            submenu: [{
                    label: 'Hasktags',
                    submenu: [{
                            label: 'Show Tags',
                            command: 'ide-haskell-hasktags:show-tags',
                        }, {
                            label: 'Show File Tags',
                            command: 'ide-haskell-hasktags:show-file-tags',
                        }],
                }],
        }]));
}
exports.activate = activate;
function consumeUPI(register) {
    const upi = register({
        name: 'ide-haskell-hasktags',
    });
    const disp = new atom_1.CompositeDisposable();
    disposables.add(disp);
    disp.add(upi);
    disp.add(atom.commands.add('atom-text-editor', {
        'ide-haskell-hasktags:go-to-declaration': ({ currentTarget, detail }) => {
            if (!active)
                return;
            const editor = currentTarget.getModel();
            const buffer = editor.getBuffer();
            const er = upi.getEventRange(editor, detail);
            if (!er)
                return;
            const { crange } = er;
            const { start, end } = buffer.rangeForRow(crange.start.row, false);
            const crange2 = { start: crange.start, end: crange.end };
            const left = buffer.getTextInRange([start, crange.start]);
            crange2.start.column = left.search(/[\w']*$/);
            const right = buffer.getTextInRange([crange.end, end]);
            crange2.end.column += right.search(/[^\w']|$/);
            const symbol = buffer.getTextInRange(crange2);
            const tags = exports.tagsInstance.findTag(symbol);
            switch (tags.length) {
                case 0: return;
                case 1:
                    void open(editor, tags[0]);
                    break;
                default: void showList(editor, tags);
            }
        },
    }));
    disp.add(atom.contextMenu.add({
        'atom-text-editor[data-grammar~="haskell"]': [{
                label: 'Go to Declaration',
                command: 'ide-haskell-hasktags:go-to-declaration',
            }],
    }));
    return disp;
}
exports.consumeUPI = consumeUPI;
function deactivate() {
    disposables.dispose();
    exports.tagsInstance.destroy();
    active = false;
}
exports.deactivate = deactivate;
//# sourceMappingURL=data:application/json;base64,